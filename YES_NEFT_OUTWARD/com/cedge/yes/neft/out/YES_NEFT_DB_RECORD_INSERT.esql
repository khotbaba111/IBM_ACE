BROKER SCHEMA com.cedge.yes.neft.out

   CREATE FUNCTION initLog4j( IN CONFIG_FILE_NAME CHARACTER )
   RETURNS BOOLEAN
   LANGUAGE JAVA
   EXTERNAL NAME "com.ibm.broker.IAM3.Log4jNode.initLog4j";
--   CREATE FUNCTION log4j( IN COMPONENT_NAME CHARACTER,
--   IN LEVEL CHARACTER,
--   IN TEXT CHARACTER )
--   RETURNS BOOLEAN
--   LANGUAGE JAVA
--   EXTERNAL NAME "com.ibm.broker.IAM3.Log4jNode.log";
   CREATE FUNCTION log4j_1_1( IN COMPONENT_NAME CHARACTER,
   IN LOGGER_NAME CHARACTER,
   IN LEVEL CHARACTER,
   IN TEXT CHARACTER )
   RETURNS BOOLEAN
   LANGUAGE JAVA
   EXTERNAL NAME "com.ibm.broker.IAM3.Log4jNode.log";
   
CREATE COMPUTE MODULE YES_NEFT_DB_RECORD_INSERT
--	DECLARE SFMS EXTERNAL CHARACTER;
	DECLARE DSN EXTERNAL CHARACTER;
	DECLARE LogPath EXTERNAL CHARACTER;
	DECLARE PROP_LOC EXTERNAL CHARACTER;
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		DECLARE rc BOOLEAN;
		CALL initLog4j(LogPath) INTO rc;
		CALL copyPayload();
		CALL log4j_1_1('DB_RECORD_INSERT', 'YES_NEFT_OUTWARD', 'WARN','---------------------------------------------------START---------------------------------------------------') INTO rc;
		CALL log4j_1_1('DB_RECORD_INSERT', 'YES_NEFT_OUTWARD', 'WARN','Message received from CBS ') INTO rc;
		CALL log4j_1_1('DB_RECORD_INSERT', 'YES_NEFT_OUTWARD', 'WARN','Transaction number : '||InputRoot.DFDL.*.Body.record.TRANSACTIONREFERENCENUMBER) INTO rc;
		CALL log4j_1_1('DB_RECORD_INSERT', 'YES_NEFT_OUTWARD', 'WARN','Message inserted into NEFT_OUT_PAYLOAD table') INTO rc;
		
		SET OutputRoot.MQRFH2 = NULL;
		DECLARE flag BOOLEAN CopyEntireMessage();
	
		DECLARE whiteSpace CONSTANT CHARACTER CAST( X'090D0A20' AS CHAR CCSID 1208);
		
		DECLARE FTP_FILE,Extension CHARACTER ;
        SET Extension = Environment.filename;
        SET FTP_FILE  = Environment.filename;
        SET FTP_FILE  = SUBSTRING(FTP_FILE BEFORE '.');
        SET Extension = SUBSTRING(Extension AFTER '.');
        SET Extension = LOWER(Extension);
		
		IF flag THEN
			CALL updateLocalEnv();
			SET OutputRoot.DFDL = InputRoot.DFDL;
			SET OutputLocalEnvironment.Destination.File.Name = FTP_FILE||'.'||Extension||'.Done';			
			CALL log4j_1_1('DB_RECORD_INSERT', 'YES_NEFT_OUTWARD', 'WARN','Writing '||FTP_FILE||'.'||Extension||'.Done file to CBS') INTO rc;
			RETURN TRUE;
		ELSE
			CALL updateLocalEnv();
			SET OutputRoot.DFDL = InputRoot.DFDL;
			IF Environment.retryCount >= 1 THEN
					SET OutputLocalEnvironment.Destination.File.Name = FTP_FILE||'.'||Extension||'.Dup';
					CALL log4j_1_1('DB_RECORD_INSERT', 'YES_NEFT_OUTWARD', 'WARN','Writing '||FTP_FILE||'.'||Extension||'.Dup file to CBS') INTO rc;
					PROPAGATE TO TERMINAL 'out1' DELETE NONE;
					RETURN FALSE;
			ELSE
					SET OutputLocalEnvironment.Destination.File.Name = FTP_FILE||'.'||Extension||'.Dup';
					CALL log4j_1_1('DB_RECORD_INSERT', 'YES_NEFT_OUTWARD', 'WARN','Writing '||FTP_FILE||'.'||Extension||'.Dup file to CBS') INTO rc;
					CALL log4j_1_1('DB_RECORD_INSERT', 'YES_NEFT_OUTWARD', 'WARN','-----------------------------------------------END------------------------------------------') INTO rc;
					PROPAGATE TO TERMINAL 'out1' DELETE NONE;
					RETURN FALSE;
				END IF;	
		END IF;
		
	END;
	
	CREATE PROCEDURE copyPayload ( )
	BEGIN
		
		DECLARE msgId CHARACTER InputRoot.MQMD.MsgId;
		SET msgId = SUBSTRING(msgId FROM 3 FOR 48);
		DECLARE txnNum CHARACTER InputRoot.DFDL.*.Body.TRANSACTIONREFERENCENUMBER;
		DECLARE datechar CHARACTER CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMdd');
		SET txnNum = datechar||txnNum;
		DECLARE check ROW;
		SET check.R[] = PASSTHRU('SELECT RETRY_COUNT,FILE_NAME,STATUS FROM NEFT_OUT_PAYLOAD WHERE TXN_REF_NUM = ?' TO Database.{DSN} VALUES(txnNum));
		--DECLARE flag INTEGER CARDINALITY(check.R[]);
		IF check.R[1].RETRY_COUNT >= 0 THEN
			UPDATE Database.NEFT_OUT_PAYLOAD as T
			SET
			LAST_MOD_TIME = CURRENT_TIMESTAMP,
			RETRY_COUNT=check.R[1].RETRY_COUNT+1
			WHERE
			T.TXN_REF_NUM = txnNum;
			SET Environment.filename  = check.R[1].FILE_NAME;
			SET Environment.retryCount = check.R[1].RETRY_COUNT;
		ELSEIF check.R[1].RETRY_COUNT = 0 OR check.R[1].STATUS = 'S' THEN
			
			SET Environment.filename  = check.R[1].FILE_NAME;
			
		ELSE
			DECLARE wholeMsgBlob BLOB ASBITSTREAM(InputRoot.DFDL, InputRoot.Properties.Encoding, InputRoot.Properties.CodedCharSetId );
	 		DECLARE wholeMsgChar CHAR CAST(wholeMsgBlob AS CHAR CCSID InputRoot.Properties.CodedCharSetId);
--	 		DECLARE wholeMsgChar CHAR CAST(wholeMsgBlob AS CHAR CCSID 1251);
	 		
	 		DECLARE fileName CHARACTER;
	 		SET fileName = InputRoot.MQRFH2.usr.filename;
	 		SET Environment.filename = fileName;
	 		
	 		INSERT INTO Database.NEFT_OUT_PAYLOAD (MSGID,PAYLOAD,CREATION_TIME,LAST_MOD_TIME,STATUS,RETRY_COUNT,FILE_NAME,TXN_REF_NUM ) 
	 		VALUES (msgId,wholeMsgChar, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,'F', '0',fileName,txnNum);			
		END IF;
		
	END;
	/*
	* This Methode is used to copy the message headers from Input tree to Output tress
	*/
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
	/*
	* In this message we will call appropriate methods to update/insert the values in the Database.
	* For the Message Type N06&N07, this methode calls insertDatabase method
	* For the Message Type N10, this methode calls updateDatabase method
	*/
	CREATE PROCEDURE CopyEntireMessage()RETURNS BOOLEAN BEGIN
		
		DECLARE sType CHARACTER InputRoot.DFDL.*.Header.SUBMESSAGETYPE;
		SET OutputRoot.DFDL.{sType} = NULL;
		DECLARE rc BOOLEAN;
		DECLARE whiteSpace CONSTANT CHARACTER CAST( X'090D0A20' AS CHAR CCSID 1208);
		SET Environment.msgtype = sType;
		DECLARE trn CHARACTER ;
		SET trn =InputRoot.DFDL.*.Body.record[1].TRANSACTIONREFERENCENUMBER ;
	    SET trn =TRIM(whiteSpace FROM trn);
	
		DECLARE msg CHARACTER;
		IF sType <> 'N10' THEN
			DECLARE verify ROW;
			SET verify.R[] = PASSTHRU('SELECT TRAN_REF_NO FROM NEFT_OUT WHERE TRAN_REF_NO = ?' TO Database.{DSN} VALUES(trn));
			DECLARE Ref REFERENCE TO verify.R[<];
			IF NOT LASTMOVE(Ref) THEN
					IF sType = 'N06' THEN
						DECLARE N06Header REFERENCE TO InputRoot.DFDL.N06.Header;
						DECLARE N06Record REFERENCE TO InputRoot.DFDL.N06.Body.record[1];
						DECLARE N06Body REFERENCE TO InputRoot.DFDL.N06.Body;
						WHILE LASTMOVE(N06Record) DO
							SET msg = '';
							CALL getMsg(N06Header,N06Record,N06Body,sType,msg);
							CALL insertDatabase(N06Header,N06Record,N06Body,sType,msg );
							MOVE N06Record NEXTSIBLING;
						END WHILE;	
						CALL log4j_1_1('DB_RECORD_INSERT', 'YES_NEFT_OUTWARD', 'WARN','Message Type is : '||sType) INTO rc;
						CALL log4j_1_1('DB_RECORD_INSERT', 'YES_NEFT_OUTWARD', 'WARN','Data inserted into NEFT_OUT and NEFT_MSG_OUT tables') INTO rc;
					ELSE
						DECLARE N07Header REFERENCE TO InputRoot.DFDL.N07.Header;
						DECLARE N07Record REFERENCE TO InputRoot.DFDL.N07.Body.record[1];
						DECLARE N07Body REFERENCE TO InputRoot.DFDL.N07.Body;
						WHILE LASTMOVE(N07Record) DO
							SET msg = '';
							CALL getMsg(N07Header,N07Record,N07Body,sType,msg);
							CALL insertDatabase(N07Header,N07Record,N07Body,sType,msg );
							CALL updateDatabaseN07(N07Record);
							MOVE N07Record NEXTSIBLING;
						END WHILE;
						CALL log4j_1_1('DB_RECORD_INSERT', 'YES_NEFT_OUTWARD', 'WARN','Message Type is : '||sType) INTO rc;
						CALL log4j_1_1('DB_RECORD_INSERT', 'YES_NEFT_OUTWARD', 'WARN','Data inserted into NEFT_OUT,NEFT_MSG_OUT and updated in NEFT_IN table') INTO rc;
					END IF;	
					RETURN TRUE;
			ELSE
				DECLARE sIFSC CHARACTER;
				SET sIFSC = TRIM(whiteSpace FROM InputRoot.DFDL.*.Body.record[1].SENDINGBRANCHIFSC);
				DECLARE sifsc CHARACTER;
				SET sifsc = SUBSTRING(sIFSC FROM 1 FOR 9)||'%';
				DECLARE DB_Details ROW;
		   		DECLARE Qry CHARACTER 'SELECT A.BANKNAME FROM BANKNAME A WHERE A.IFSC_CODE LIKE ? ';
		   		SET DB_Details.A[] = PASSTHRU(Qry TO Database.{DSN} VALUES(sifsc));
				SET Environment.bankName = TRIM(DB_Details.A[1].BANKNAME);
				CALL log4j_1_1('DB_RECORD_INSERT', 'YES_NEFT_OUTWARD', 'WARN','Duplicate record found for this transaction.') INTO rc;
				RETURN FALSE;
			END IF;
		ELSE
			
			DECLARE N10Record REFERENCE TO InputRoot.DFDL.N10.Body.record[1];
			DECLARE N10Header REFERENCE TO InputRoot.DFDL.N10.Header;
			DECLARE N10Body REFERENCE TO InputRoot.DFDL.N10.Body;
		
			DECLARE seqHeader CHARACTER;
	 		SET seqHeader = N10Header.SEQUENCENUMBER;
	 		SET Environment.seqHeader = seqHeader;
	 			
			WHILE LASTMOVE(N10Record) DO
			CALL getMsg(N10Header,N10Record,N10Body,sType,msg);
			CALL updateDatabaseN10(N10Record,msg);
			MOVE N10Record NEXTSIBLING;
			END WHILE;	
			
			CALL log4j_1_1('DB_RECORD_INSERT', 'YES_NEFT_OUTWARD', 'WARN','Message Type is : '||sType) INTO rc;
			CALL log4j_1_1('DB_RECORD_INSERT', 'YES_NEFT_OUTWARD', 'WARN','Record updated in NEFT_IN table') INTO rc;
			RETURN TRUE;
		END IF;	
	END;
	/*CREATE PROCEDURE getMsgN10 (INOUT msg CHARACTER )
	BEGIN
		DECLARE wholeMsgBlob BLOB ASBITSTREAM(InputRoot.DFDL, InputRoot.Properties.Encoding, InputRoot.Properties.CodedCharSetId );
	 	DECLARE wholeMsgChar CHAR CAST(wholeMsgBlob AS CHAR CCSID InputRoot.Properties.CodedCharSetId);
		SET msg = wholeMsgChar;
	END;*/
	CREATE PROCEDURE updateDatabaseN07(IN record REFERENCE)
	BEGIN
		DECLARE relRefNum,tranRefNum CHARACTER;
  DECLARE cTime CHARACTER CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'dd-MMM-yyyy hh:mm:ss: a');
  	--- DECLARE cTime CHARACTER CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'dd-MMM-yyyy HH:mm:ss  ');
		DECLARE Relref REFERENCE TO record.RELATED_REFERENCE_NUMBER;--2006
		DECLARE TranRef REFERENCE TO record.TRANSACTIONREFERENCENUMBER; --2020
		DECLARE whiteSpace CONSTANT CHARACTER CAST( X'090D0A20' AS CHAR CCSID 1208);
		IF LASTMOVE(Relref) THEN
			SET relRefNum = TRIM(whiteSpace FROM Relref);			
		END IF;
		SET tranRefNum = TRIM(whiteSpace FROM TranRef);	
		DECLARE ref ROW;
		--update neft_in set ACK_NACK='N',LAST_UPD_STAMP=? ,ACK_NACK_FROM_CBS='Y',ACK_NACK_SEND_MQ='R' where TRAN_REF_NO=?
		DECLARE qry CHARACTER 'UPDATE NEFT_IN SET ACK_NACK=''N'', LAST_MOD_TIME = ?, ACK_NACK_FROM_CBS=''Y'', TRAN_REF_RETURN_UTR = ? WHERE TRAN_REF_NO = ?';
		SET ref.A[] = PASSTHRU(qry TO Database.{DSN} VALUES(CURRENT_TIMESTAMP,tranRefNum,relRefNum));
		
	END;		
	CREATE PROCEDURE getMsg(IN HeaderRef REFERENCE, IN RecRef REFERENCE,IN BodyRef REFERENCE, IN stype2 CHARACTER, INOUT msg2 CHARACTER )
	BEGIN
		DECLARE Outref REFERENCE TO OutputRoot.DFDL;
		DECLARE whiteSpace CONSTANT CHARACTER CAST( X'090D0A20' AS CHAR CCSID 1208);
		SET Outref.{stype2}.Header = HeaderRef;
		SET Outref.{stype2}.Body.BLOCKIDENTIFIER = TRIM(whiteSpace FROM BodyRef.BLOCKIDENTIFIER);
		SET Outref.{stype2}.Body.TRANSACTIONREFERENCENUMBER = BodyRef.TRANSACTIONREFERENCENUMBER;
		SET Outref.{stype2}.Body.BATCHTIME = BodyRef.BATCHTIME;
		SET Outref.{stype2}.Body.TOTALNUMBEROFMESSAGES = BodyRef.TOTALNUMBEROFMESSAGES;
		SET Outref.{stype2}.Body.SUMOFAMOUNTS = BodyRef.SUMOFAMOUNTS;
		SET Outref.{stype2}.Body.record = RecRef;
		DECLARE wholeMsgBlob BLOB ASBITSTREAM(OutputRoot.DFDL, InputRoot.Properties.Encoding, InputRoot.Properties.CodedCharSetId );
	 	DECLARE wholeMsgChar CHAR CAST(wholeMsgBlob AS CHAR CCSID InputRoot.Properties.CodedCharSetId);
--	 	DECLARE wholeMsgChar CHAR CAST(wholeMsgBlob AS CHAR CCSID 1251);
		SET msg2 = wholeMsgChar;
		--SET OutputRoot.DFDL = NULL;
		
	END;
	CREATE PROCEDURE updateDatabaseN10 (IN N10Record REFERENCE, IN msg CHARACTER)
	BEGIN
			
		DECLARE ref ROW;
   DECLARE cTime CHARACTER CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'dd-MMM-yyyy hh:mm:ss: a');
 	  --- DECLARE cTime CHARACTER CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'dd-MMM-yyyy HH:mm:ss ');
		DECLARE whiteSpace CONSTANT CHARACTER CAST( X'090D0A20' AS CHAR CCSID 1208);
		--DECLARE Relrefn10 REFERENCE TO N10Record.TRANSACTONREFERENCENUMBER;--2020
		DECLARE Relrefn10 REFERENCE TO N10Record.RELATED_REFERENCE;--2006
		DECLARE relRefNum CHARACTER;
		IF LASTMOVE(Relrefn10) THEN
			SET relRefNum = TRIM(whiteSpace FROM Relrefn10);			
		END IF;
		DECLARE DB_Details ROW;
   		DECLARE Qry CHARACTER 'SELECT A.BANKNAME FROM NEFT_IN A WHERE A.TRAN_REF_NO = ?';
   		SET DB_Details.A[] = PASSTHRU(Qry TO Database.{DSN} VALUES(relRefNum));
		SET Environment.bankName = TRIM(DB_Details.A[1].BANKNAME);
		DECLARE qry CHARACTER 'UPDATE NEFT_IN SET ACK_NACK=''Y'', LAST_MOD_TIME = ?, ACK_NACK_FROM_CBS=''Y'', ACK_NACK_MSG = ? WHERE TRAN_REF_NO = ?';
		SET ref.A[] = PASSTHRU(qry TO Database.{DSN} VALUES(CURRENT_TIMESTAMP,msg,relRefNum));
		
	END;
	CREATE PROCEDURE insertDatabase(IN Header REFERENCE, IN Rec REFERENCE,IN Body REFERENCE, IN msgType CHARACTER, IN msg CHARACTER ) 
	BEGIN
		DECLARE whiteSpace CONSTANT CHARACTER CAST( X'090D0A20' AS CHAR CCSID 1208);
		DECLARE OrgRemitRef REFERENCE TO Rec.ORIGINATOROFREMITTANCE.LINE1;
		DECLARE BenAddrRef REFERENCE TO Rec.BENEFICIARYCUSTOMERADDRESS.LINE1;
		DECLARE SendToRecvInfoRef REFERENCE TO Rec.SENDERTIRECEIVERINFORMATION.LINE1;
		DECLARE branchCode CHARACTER InputRoot.DFDL.*.SpaceFiller;
		SET branchCode = SUBSTRING(branchCode FROM 1 FOR 5);
		IF LENGTH(branchCode) = 0 OR LENGTH(branchCode) < 5  THEN
			SET branchCode = '00000';
		END IF;
		--SET branchCode = TRIM(whiteSpace FROM branchCode);
		--DECLARE msgType CHARACTER FIELDNAME(InputRoot.DFDL.*);
		DECLARE relRefNum CHARACTER;
		DECLARE Relref REFERENCE TO Rec.RELATED_REFERENCE_NUMBER;
		IF LASTMOVE(Relref) THEN
			SET relRefNum = Relref;			
		END IF;
		--DECLARE bankName CHARACTER 'bankname';
		DECLARE bankNameref ROW;    
		DECLARE sIFSC CHARACTER TRIM(whiteSpace FROM Rec.SENDINGBRANCHIFSC);
		DECLARE sifsc CHARACTER;
		SET sifsc = SUBSTRING(sIFSC FROM 1 FOR 8) || '%';
		DECLARE DB_Details ROW;
   		DECLARE Qry CHARACTER 'SELECT A.BANKNAME FROM BANKNAME A WHERE A.IFSC_CODE LIKE ? ';
   		SET DB_Details.A[] = PASSTHRU(Qry TO Database.{DSN} VALUES(sifsc));
		SET Environment.bankName = TRIM(DB_Details.A[1].BANKNAME);
		DECLARE orgRemt CHARACTER '';
		DECLARE benAddr CHARACTER '';
		DECLARE sendToRecvInfo CHARACTER '';
		WHILE lastmove(OrgRemitRef) DO
			SET orgRemt = orgRemt||OrgRemitRef;
			MOVE OrgRemitRef NEXTSIBLING;
		END WHILE;
		WHILE lastmove(BenAddrRef) DO
			SET benAddr = benAddr||BenAddrRef;
			MOVE BenAddrRef NEXTSIBLING;
		END WHILE;
		WHILE lastmove(SendToRecvInfoRef) DO
			SET sendToRecvInfo = sendToRecvInfo||SendToRecvInfoRef;
			MOVE SendToRecvInfoRef NEXTSIBLING;
		END WHILE;
		/*DECLARE wholeMsgBlob BLOB ASBITSTREAM(InputRoot.DFDL, Root.Properties.Encoding, Root.Properties.CodedCharSetId );
	 	DECLARE wholeMsgChar CHAR CAST(wholeMsgBlob AS CHAR CCSID InputRoot.Properties.CodedCharSetId);*/
	 	DECLARE trRef CHARACTER TRIM(whiteSpace FROM Rec.TRANSACTIONREFERENCENUMBER);
	 	/*
	 	:6346:R03 / <REASON_CODE>
		:6366:ACCOUNT NO DOES NOT EXIST / <REJECTION_CODE>
	 	*/
	 	DECLARE rejectCode CHARACTER '';
	 	DECLARE rejectReason CHARACTER '';
	 	IF Environment.msgtype = 'N07' THEN
	 		SET rejectCode = Rec.REASON_CODE;
	 		SET rejectReason = Rec.REJECTION_CODE;
	 	END IF;
	 	DECLARE bIFSC CHARACTER TRIM(whiteSpace FROM Rec.BENEFICIARYBRANCHSIFSC);
	 	DECLARE vdate CHARACTER TRIM(whiteSpace FROM Rec.VALUEDATE);
	 	DECLARE bname CHARACTER TRIM(whiteSpace FROM Environment.bankName);
	   -- DECLARE cTime CHARACTER CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'dd-MMM-yyyy hh:mm:ss: a');
	  	  DECLARE cTime CHARACTER CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'dd-MMM-yyyy HH:mm:ss  ');
	 	DECLARE sTime CHARACTER;
	 	SET sTime = UPPER(cTime);
	 	DECLARE seqHeader CHARACTER;
	 	SET seqHeader = Header.SEQUENCENUMBER;
	 	SET Environment.seqHeader = seqHeader;
		-- Production server query.
	
		INSERT INTO Database.NEFT_OUT (TRAN_REF_NO,TRAN_DATE,AMOUNT,IFSC_SENDER,SENDER_ACCT_TYPE,SENDER_ACCT_NO,SENDER_ACCT_NAME,
		ORIG_REMITTANCE,IFSC_RECVR,RECVR_ACCT_TYPE,RECVR_ACCT_NO,RECVR_ACCT_NAME,BENEF_ADDRS,SEND_TO_RECE_INFO,REJECT_CODE,
		REJECT_REASON,ACK_NACK,CREATION_TIME,LAST_MOD_TIME,OUT_MSG_SENT_SBI,BANKNAME,TRAN_BRANCH,ACK_NACKOUT_SEND_CBS,
		SUB_MSG_TYPE,ACK_NACK_TIME,RET_ORG_ERR,DUP_ORG_OUT,N10_ACKNACK,SEQINHEADER,TRAN_REF_RETURN_UTR,LAST_UPD_STAMP,
		CREATION_TIME_STAMP,CBS_FILENAME,THERE_FILENAME) 
		 VALUES 
		(Rec.TRANSACTIONREFERENCENUMBER,
		 Rec.VALUEDATE,
		 Rec.AMOUNT,
		 Rec.SENDINGBRANCHIFSC,
		 Rec.SENDINGCUSTOMERACCOUNTTYPE,
		 Rec.SENDINGCUSTOMERACCOUNTNUMBER,
		 Rec.SEDINGCUSTOMERACCOUNTNAME,
		 orgRemt,
		 Rec.BENEFICIARYBRANCHSIFSC,
		 Rec.BENEFICIARYCUSTOMERACTYPE,
		 Rec.BENEFICIARYCUSTOMERACNUMBER,
		 Rec.BENEFICIARYCUSTOMERACNAME,
		 benAddr,
		 sendToRecvInfo,
		 rejectCode,
		 rejectReason,
		 '0',
		 sTime,
		 sTime,
		 '0',
		 Environment.bankName,
		 branchCode,
		 '0',
		 msgType,
		 '0',
		 '0',
		 '0',
		 '0',
		 seqHeader,
		 relRefNum,
		 CURRENT_TIMESTAMP,
		 CURRENT_TIMESTAMP,
		 Environment.filename,
		 '0'
		 );
		 
		 
		INSERT INTO Database.NEFT_MSG_OUT (REF_NO,MSG,TRAN_DATE,BANKNAME,CREATION_TIME) 
		VALUES ( trRef,
		msg,
		vdate,
		bname,
		CURRENT_TIMESTAMP
		);
	END;
	CREATE PROCEDURE updateLocalEnv() BEGIN
		DECLARE key CHARACTER 'key';-- Environment.bankName||'_'||Environment.stype;
		DECLARE bank CHARACTER TRIM(Environment.bankName);
		DECLARE rc BOOLEAN;
		IF Environment.msgtype='N06' THEN
			SET key = 'OUT_'||bank;
		ELSEIF Environment.msgtype='N07' THEN
			SET key = 'OUT_'||bank;
		ELSE
			SET key = 'N10_OUT_'||bank;
		END IF;
		CALL log4j_1_1('NEFT_OUT', 'YES_NEFT_OUTWARD', 'WARN','Retrieving values from properties file') INTO rc;
		DECLARE fileLoc,ftpProvider,appID CHARACTER;
		-- Reading values from properties file.
		CALL getProp( PROP_LOC, key,bank, fileLoc, ftpProvider);
		--Logging
		
		CALL log4j_1_1('DB_RECORD_INSERT', 'YES_NEFT_OUTWARD', 'WARN','Bank name : '||bank) INTO rc;
		CALL log4j_1_1('DB_RECORD_INSERT', 'YES_NEFT_OUTWARD', 'WARN','FTP Provider name : '||ftpProvider) INTO rc;
		CALL log4j_1_1('DB_RECORD_INSERT', 'YES_NEFT_OUTWARD', 'WARN','Remote Server directory : '||fileLoc) INTO rc;
	
		
	--	SET OutputLocalEnvironment.Destination.File.Name = Environment.filename||'.Done';
--MQ--	SET OutputLocalEnvironment.Destination.File.Remote.Server = ftpProvider;
--MQ--	SET OutputLocalEnvironment.Destination.File.Remote.ServerDirectory = fileLoc;
		SET OutputLocalEnvironment.Destination.File.Directory = fileLoc;
	--	SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = queueName;
	END;
	CREATE PROCEDURE  getProp( IN P1 CHARACTER, IN P2 CHARACTER, IN P3 CHARACTER,INOUT P4 CHARACTER, INOUT P5 CHARACTER)
 	LANGUAGE JAVA 
 	EXTERNAL NAME "com.cedge.properties.YES_NEFT_OUTWARD_PROPERTIES.getProperties";

END MODULE;
